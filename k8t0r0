#!/usr/bin/env bash
# Copyright (c) 2018 SD Elements Inc.
#
#  All Rights Reserved.
#
# NOTICE:  All information contained herein is, and remains
# the property of SD Elements Incorporated and its suppliers,
# if any.  The intellectual and technical concepts contained
# herein are proprietary to SD Elements Incorporated
# and its suppliers and may be covered by U.S., Canadian and other Patents,
# patents in process, and are protected by trade secret or copyright law.
#

# Set version
version=0.1

# Import shell standard library
source import_shtdlib

# Prefixes the bash prompt with all/any arguments
export stored_ps="${PS1}"
function prefix_prompt {
    export PS1="${*} ${PS1}"
}

# Removes any prefixes previously added
function strip_prompt {
    export PS1="${stored_ps}"
}

# Print usage and argument list
function print_usage {
cat << EOF

K8T 0R0

Simple utility to manage multiple kubernetes cluster definictions and connections

${0} can either be sourced and it's convenience functions used or it can be
used to run individual commands using the specified arguments (or defaults)

Any positional parameters following the argumments will be considered to be part
of the command that's supposed to be run

usage: ${0} [-c] [--cluster {{fqdn or ip}} ] # defaults to "localhost"
            [-n] [--namespace {{namespace}} ] # defaults to "default"
            [-u] [--user {{user}}] # defaults to ${USER}

optional arguments:
  -r, --reset           Reset runtime environment to default
  -h, --help            Show this help message and exit
  -v  --verbose         Verbose console logging


examples:


# Sourced
source ${0}
set-k8-cluster #(defaults to "localhost")
set-k8t-namespace (defaults to "default")
set-k8t-user (defaults to "${USER}")
kubectl get pods
k9s

# Individual command
${0} -c k8s-cluster.example.com -n ingress -u jdoe kubectl get pods

Version: ${version}
EOF
}

# Function to handle mutually exclusive argsuments, call with variable name to
# check and error message to show
function  mutually_exclusive_parameters {
    if [ -n "${!1}" ] ; then
        color_echo red "${2}"
        print_usage
        exit 64
    fi
}

# Parse command line arguments
function parse_arguments {
    debug 5 "Parse Arguments got argument: ${1}"
    case ${1} in
        '-')
            # This uses the parse_arguments logic to parse a tag and it's value
            # The value is passed on in the OPTARG variable which is standard
            # when parsing arguments with optarg.
            tag="${OPTARG}"
            debug 10 'Found long argument/option'
            parse_opt_arg OPTARG ''
            parse_arguments "${tag}"
        ;;
        'c'|'cluster')
            cluster="${OPTARG}"
            debug 5 "Set cluster to: ${cluster}"
        ;;
        'n'|'namespace')
            user="${OPTARG}"
            debug 5 "Set namespace to: ${namespace}"
        ;;
        'u'|'user')
            user="${OPTARG}"
            debug 5 "Set user to: ${user}"
        ;;
        'l'|'list')
            user="${OPTARG}"
            debug 5 "Listing existing k8s clusters, users and contexts"
        ;;
        'r'|'aws_region')
            aws_region="${OPTARG}"
            debug 5 "Set AWS Region to: ${aws_region}"
        ;;
        'a'|'aws_role_arn')
            aws_role_arn="${OPTARG}"
            debug 5 "Set AWS Role ARN to: ${aws_role_arn}"
        ;;
        'm'|'aws_mfa_serial')
            aws_mfa_serial="${OPTARG}"
            debug 5 "Set AWS MFA Serial to: ${aws_mfa_serial}"
        ;;
        'k'|'aws_key_id') # AWS Access Key ID
            aws_key_id="${OPTARG}"
            debug 5 "Set AWS Key ID to: ${aws_key_id}"
        ;;
        'w'|'write_config')
            config_file_path="${OPTARG}"
            debug 5 "Writing config file to: ${config_file_path}"
            directory="$(dirname ${config_file_path})"
            if [ ! -d "${directory}" ] ; then
                color_echo red "Error, directory: ${directory} not found, exiting!"
                exit 1
            fi
        ;;

        'r'|'reset')
            user="${OPTARG}"
            debug 5 "Resetting"
            strip_prompt
        ;;
        'p'|'password') # Password/Secret/Access/Key
            mutually_exclusive_parameters secret  "The -p/--password and -s/--stdin flags/parameters are mutually exclusive and can't be used together!"
            debug 5 "Prompting for password/secret/key"
            read -s -p "Password: " secret
        ;;
        's'|'stdin') # Password/Secret/Access/Key
            mutually_exclusive_parameters secret  "The -s/--stdin and -p/--password flags/parameters are mutually exclusive and can't be used together!"
            debug 5 "Reading password/secret/key from stdin"
            secret="$(cat -)"
        ;;
        'v'|'verbose')
            parse_opt_arg verbosity '10'
            export verbose=true
            export verbosity
            debug 1 "Set verbosity to: ${verbosity}"
        ;;
        'h'|'help'|'version')    # Help
            print_usage
            exit 0
        ;;
        '?')    # Invalid option specified
            color_echo red "Invalid option '${OPTARG}'"
            print_usage
            exit 64
        ;;
        ':')    # Expecting an argument but none provided
            color_echo red "Missing option argument for option '${OPTARG}'"
            print_usage
            exit 64
        ;;
        *)    # Anything else
            color_echo red 'Unknown error while processing options'
            print_usage
            exit 64
        ;;
    esac
}

# If being executed rather than sourced
if  [ "${BASH_SOURCE}" == "${0}" ] ; then
    # Process arguments/parameters/options
    while getopts ':-:c:n:u:prsvh' opt; do
        parse_arguments "${opt}"
    done

    # Make sure required binaries are available
    assert whichs kubectl
    assert whichs yq

    # Make sure name d pipe exists
    named_pipe_path="${TMPDIR:-$(dirname $(mktemp --dry-run))}/${BASH_SOURCE}"
    if [ -p "${named_pipe_path}" ]; then
        debug 4 "Using existing named pipe: ${named_pipe_path}"
        chmod 0600 "${named_pipe_path}"
    elif [ -e "${named_pipe_path}" ] ; then
        color_echo red "Found non-standard file like object ${named_pipe_path}, please move or delete to use this program, exiting!"
        exit 1
    else
        mknod --mode=0700 "${named_pipe_path}" p

    # Dynamically create a merged config file
    while kill -0 $$ 2> /dev/null && echo bing ; do
        mapfile -d $'\0' candidate_config_files < <(find $HOME/.kube -maxdepth 1 -type f -print0)
        declare -a config_files
        for file in "${candidate_config_files[@]}" ; do
            if yq validate "${file}" ; then
                config_files+="${file}"
                debug 3 "Adding config file: ${file}"
            fi
        done
        yq merge "${config_files[@]}" > "${named_pipe_path}" &
    done
    KUBECONFIG="${named_pipe_path}" "${@}"
else
    prefix_prompt "k8s://${magenta}${user:-${USER}}${blank}@${yellow}${cluster:-localhost}${blank}:${cyan}${namespace:-default}${blank} "
    export KUBECONFIG=''
    #wget https://github.com/mikefarah/yq/releases/download/3.4.1/yq_linux_amd64 -O $HOME/bin/yq && chmod -O $HOME/bin/yq

#download special AWS kubectl commands?
#download k9s?
#download yq?
#VERSION=3.4.1 and BINARY=yq_linux_amd64 wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY} -O /usr/bin/yq &&\
#    chmod +x /usr/bin/yq
fi
